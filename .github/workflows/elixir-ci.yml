name: Elixir CI

# Define when to run the workflow
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Set environment variables
env:
  MIX_ENV: test

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest
    
    steps:
    # Step: Set up Elixir and Erlang
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.14.5' # Use the version that matches your project
        otp-version: '25.0.4'    # Use the version that matches your project
    
    # Step: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3
    
    # Step: Cache dependencies
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    
    # Step: Cache compiled project
    - name: Cache build
      uses: actions/cache@v3
      with:
        path: _build
        key: ${{ runner.os }}-build-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-build-
    
    # Step: Install dependencies
    - name: Install dependencies
      run: mix deps.get
    
    # Step: Check code formatting
    - name: Check formatting
      run: mix format --check-formatted
    
    # Step: Compile with warnings treated as errors
    - name: Compile (warnings treated as errors)
      run: mix compile --warnings-as-errors
    
    # Step: Run Credo for static code analysis
    - name: Run Credo
      run: mix credo --strict
    
    # Step: Run tests
    - name: Run tests
      run: mix test

    # Step: Check test coverage (optional)
    - name: Run tests with coverage
      run: mix test --cover 