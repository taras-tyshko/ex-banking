name: Elixir CI

# Define when to run the workflow
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# Set environment variables
env:
  MIX_ENV: test

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest
    
    steps:
    # Step: Set up Elixir and Erlang
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.14.5' # Use the version that matches your project
        otp-version: '25.0.4'    # Use the version that matches your project
    
    # Step: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3
    
    # Step: Cache dependencies
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    
    # Step: Cache compiled project
    - name: Cache build
      uses: actions/cache@v3
      with:
        path: _build
        key: ${{ runner.os }}-build-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-build-
    
    # Step: Install dependencies
    - name: Install dependencies
      run: mix deps.get
    
    # Step: Check code formatting
    - name: Check formatting
      run: mix format --check-formatted
    
    # Step: Compile with warnings treated as errors
    - name: Compile (warnings treated as errors)
      run: mix compile --warnings-as-errors
    
    # Step: Run Credo for static code analysis
    - name: Run Credo
      run: mix credo --strict
    
    # Step: Run tests
    - name: Run tests
      run: mix test

    # Step: Generate coverage report
    - name: Run tests with coverage
      run: mix test --cover
    
    # Step: Parse coverage and generate badge
    - name: Generate coverage badge
      run: |
        # Create directory for badges
        mkdir -p coverage_badges
        
        # Parse the coverage percentage from the output
        COVERAGE=$(grep -A 1 "All files" cover/modules.html | tail -n 1 | awk -F '</td><td>' '{print $NF}' | sed 's/<\/td><\/tr>//')
        COVERAGE_NUM=$(echo $COVERAGE | sed 's/%//')
        
        # Determine badge color based on coverage percentage
        if (( $(echo "$COVERAGE_NUM >= 90" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COVERAGE_NUM >= 80" | bc -l) )); then
          COLOR="green"
        elif (( $(echo "$COVERAGE_NUM >= 70" | bc -l) )); then
          COLOR="yellowgreen"
        elif (( $(echo "$COVERAGE_NUM >= 60" | bc -l) )); then
          COLOR="yellow"
        elif (( $(echo "$COVERAGE_NUM >= 50" | bc -l) )); then
          COLOR="orange"
        else
          COLOR="red"
        fi
        
        # Generate badge using shields.io
        curl -o coverage_badges/coverage.svg "https://img.shields.io/badge/coverage-$COVERAGE-$COLOR"
        
        echo "Coverage: $COVERAGE"
    
    # Step: Deploy coverage badge to GitHub Pages
    - name: Deploy coverage badge to GitHub Pages
      uses: JamesIves/github-pages-deploy-action@v4
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
      with:
        folder: coverage_badges
        branch: gh-pages
        target-folder: badges 